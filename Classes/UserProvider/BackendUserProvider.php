<?php
declare(strict_types=1);
namespace Codemonkey1988\BeStaticAuth\UserProvider;

use TYPO3\CMS\Core\Crypto\Random;
use TYPO3\CMS\Core\Database\ConnectionPool;
use TYPO3\CMS\Core\Utility\GeneralUtility;
use TYPO3\CMS\Core\Utility\StringUtility;
use TYPO3\CMS\Saltedpasswords\Salt\SaltFactory;
use TYPO3\CMS\Saltedpasswords\Utility\SaltedPasswordsUtility;

class BackendUserProvider implements UserProviderInterface
{
    /**
     * @var array
     */
    protected $authenticationInformation;

    /**
     * AbstractUserProvider constructor.
     *
     * @param array $authenticationInformation
     */
    public function __construct(array $authenticationInformation)
    {
        $this->authenticationInformation = $authenticationInformation;
    }

    /**
     * Creates a new admin user.
     * The newly created user will be disabled so it can not used for default login purpose.
     *
     * @param string $username
     * @return void
     */
    public function createAdminUser(string $username)
    {
        $data = [
            'username' => $username,
            'password' => $this->generatePassword(),
            'tstamp' => $GLOBALS['EXEC_TIME'],
            'crdate' => $GLOBALS['EXEC_TIME'],
            'description' => 'Auto generated by be_static_auth plugin',
            'admin' => 1,
            'disable' => 0,
        ];

        GeneralUtility::makeInstance(ConnectionPool::class)
            ->getConnectionForTable('be_users')
            ->insert('be_users', $data);
    }

    /**
     * @param string $username
     * @param bool $respectEnableFields
     * @return array
     */
    public function getUserByUsername(string $username, $respectEnableFields = true): array
    {
        $queryBuilder = GeneralUtility::makeInstance(ConnectionPool::class)->getQueryBuilderForTable($this->authenticationInformation['db_user']['table']);

        // Remove all restrictions - Restrictions will be set by $this->authenticationInformation['db_user']['enable_clause']
        $queryBuilder->getRestrictions()->removeAll();

        $conditions = [
            $queryBuilder->expr()->eq(
                'username',
                $queryBuilder->createNamedParameter($username)
            ),
        ];

        if ($respectEnableFields) {
            $conditions[] = $this->authenticationInformation['db_user']['enable_clause'];
        }

        $records = $queryBuilder
            ->select('*')
            ->from($this->authenticationInformation['db_user']['table'])
            ->where(...$conditions)
            ->execute()
            ->fetchAll();

        $count = count($records);
        if ($count > 1) {
            throw new \UnexpectedValueException(sprintf('Too many records found for username "%s".', $username), 1549995857);
        }

        return $count === 1 ? $records[0] : [];
    }

    /**
     * @param array $userRecord
     * @return void
     */
    public function restoreUser(array $userRecord)
    {
        $queryBuilder = GeneralUtility::makeInstance(ConnectionPool::class)->getQueryBuilderForTable($this->authenticationInformation['db_user']['table']);
        $queryBuilder->update($this->authenticationInformation['db_user']['table'])
            ->set('deleted', 0)
            ->set('disable', 0)
            ->set('admin', 1)
            ->set('usergroup', '')
            ->set('password', $this->generatePassword())
            ->execute();
    }

    /**
     * Generates a random password.
     *
     * @return string
     */
    protected function generatePassword(): string
    {
        $randomGenerator = GeneralUtility::makeInstance(Random::class);
        $randomString = $randomGenerator->generateRandomHexString(mt_rand(40, 60));
        $password = StringUtility::getUniqueId($randomString);

        if (SaltedPasswordsUtility::isUsageEnabled()) {
            $objInstanceSaltedPW = SaltFactory::getSaltingInstance();
            $password = $objInstanceSaltedPW->getHashedPassword($password);
        }

        return $password;
    }
}
