<?php

declare(strict_types=1);

/*
 * This file is part of the "be_static_auth" Extension for TYPO3 CMS.
 *
 * For the full copyright and license information, please read the
 * LICENSE file that was distributed with this source code.
 */

namespace Codemonkey1988\BeStaticAuth\UserProvider;

use Codemonkey1988\BeStaticAuth\Service\StaticAuthenticationService;
use Doctrine\DBAL\Result;
use TYPO3\CMS\Core\Crypto\PasswordHashing\PasswordHashFactory;
use TYPO3\CMS\Core\Database\ConnectionPool;
use TYPO3\CMS\Core\Exception;
use TYPO3\CMS\Core\Utility\GeneralUtility;

/**
 * @phpstan-import-type AuthenticationInformation from StaticAuthenticationService
 */
class BackendUserProvider implements UserProviderInterface
{
    /**
     * @var AuthenticationInformation
     */
    protected array $authenticationInformation;

    /**
     * @param AuthenticationInformation $authenticationInformation
     */
    public function setAuthenticationInformation(array $authenticationInformation): void
    {
        $this->authenticationInformation = $authenticationInformation;
    }

    /**
     * @return AuthenticationInformation
     */
    public function getAuthenticationInformation(): array
    {
        return $this->authenticationInformation;
    }

    /**
     * Creates a new admin user.
     * The newly created user will be disabled so it can not used for default login purpose.
     */
    public function createAdminUser(string $username): void
    {
        $data = [
            'username' => $username,
            'password' => $this->generateRandomPassword(),
            'tstamp' => $GLOBALS['EXEC_TIME'],
            'crdate' => $GLOBALS['EXEC_TIME'],
            'description' => 'Auto generated by be_static_auth plugin',
            'admin' => 1,
            'disable' => 0,
        ];
        GeneralUtility::makeInstance(ConnectionPool::class)
            ->getConnectionForTable('be_users')
            ->insert('be_users', $data);
    }

    /**
     * @return array<string, mixed>
     */
    public function getUserByUsername(string $username, bool $respectEnableFields = true): array
    {
        $queryBuilder = GeneralUtility::makeInstance(ConnectionPool::class)
            ->getQueryBuilderForTable($this->authenticationInformation['db_user']['table']);
        $queryBuilder->getRestrictions()->removeAll();

        $conditions = [
            $queryBuilder->expr()->eq(
                'username',
                $queryBuilder->createNamedParameter($username)
            ),
        ];

        if ($respectEnableFields) {
            $conditions[] = $this->authenticationInformation['db_user']['enable_clause'];
        }

        /** @var Result $result */
        $result = $queryBuilder
            ->select('*')
            ->from($this->authenticationInformation['db_user']['table'])
            ->where(...$conditions)
            ->execute();
        if (method_exists($result, 'fetchAllAssociative')) {
            $records = $result->fetchAssociative();
        } else {
            /** @phpstan-ignore-next-line */
            $records = $result->fetchAll();
        }

        $count = count($records);
        if ($count > 1) {
            throw new \UnexpectedValueException(
                sprintf('Too many records found for username "%s".', $username),
                1549995857
            );
        }

        return $count === 1 ? $records[0] : [];
    }

    /**
     * @param array<string, mixed> $userRecord
     */
    public function restoreUser(array $userRecord): void
    {
        $queryBuilder = GeneralUtility::makeInstance(ConnectionPool::class)
            ->getQueryBuilderForTable($this->authenticationInformation['db_user']['table']);
        $queryBuilder->update($this->authenticationInformation['db_user']['table'])
            ->set('deleted', '0')
            ->set('disable', '0')
            ->set('admin', '1')
            ->set('usergroup', '')
            ->set('password', $this->generateRandomPassword())
            ->execute();
    }

    protected function generateRandomPassword(): string
    {
        $triesLeft = 5;
        $generatedPassword = '';
        while ($triesLeft > 0 && strlen($generatedPassword) === 0) {
            try {
                $generatedPassword = bin2hex(random_bytes(60));
            } catch (\Exception $e) {
                $triesLeft--;
            }
        }

        if (strlen($generatedPassword) === 0) {
            throw new Exception('Could not generate random password.', 1622839550);
        }

        return $this->hashPassword($generatedPassword);
    }

    protected function hashPassword(string $plainPassword): string
    {
        $hashStrategy = GeneralUtility::makeInstance(PasswordHashFactory::class)
            ->getDefaultHashInstance('BE');

        return $hashStrategy->getHashedPassword($plainPassword);
    }
}
